import Head from "next/head";

//import GridList from "@/components/GridList";
import { useContext, useEffect, useState } from "react";
import Layout from "@/components/Layout";
import Siz3rReader from "@/components/Siz3rReader";
import { Siz3rContext } from "@/context/Siz3rContext";
import { Button, ToggleButton, ToggleButtonGroup } from "@mui/material";
import dynamic from "next/dynamic";

const GridList = dynamic(() => import("@/components/GridList"), {
  ssr: false,
});
export default function Home({ products }) {
  const [list, setList] = useState([]);
  const [category, setCategory] = useState("shirt");
  const [siz3rFilter, setSiz3rFilter] = useState(false);
  const { userSizes, gender } = useContext(Siz3rContext);
  useEffect(() => {
    setList(Object.values(products));
  }, [products]);

  const sortProducts = (list) => {
    let pants = [];
    let shirt = [];

    list.forEach((element) => {
      if (element.type === "top") {
        shirt.push({ ...element, type: "shirt" });
      } else if (element.type === "bottom") {
        pants.push({ ...element, type: "pants" });
      }
    });

    return { shirt, pants, all: [...shirt, ...pants] };
  };
  const filterProducts = (array, userSizes, type, gender) => {
    if (userSizes) {
      return array.filter((item) => {
        let matched = false;
        item.sizes.forEach((size) => {
          if (
            size.replace(/ *\([^)]*\) */g, "") ===
              userSizes[type].toUpperCase() &&
            item.gender === gender
          ) {
            matched = true;
          }
        });
        return matched;
      });
    } else {
      return array;
    }
  };

  const finalList = filterProducts(
    sortProducts(list)[category],
    siz3rFilter && userSizes,
    category,
    gender
  )
    .map((value) => ({ value, sort: Math.random() }))
    .sort((a, b) => a.sort - b.sort)
    .map(({ value }) => value);
  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>
      top:{userSizes?.shirt} bottom:{userSizes?.pants}
      <div
        style={{
          display: "flex",
          gap: 24,
          position: "sticky",
          top: 0,
          backgroundColor: "gray",
          padding: 8,
          borderRadius: 8,
          justifyContent: "space-between",
          zIndex: 10000,
        }}>
        <div
          style={{
            minWidth: "10vw",
            display: "flex",
            alignItems: "center",
            justifyContent: "flex-start",
            paddingLeft: 24,
          }}>
          <img
            src="/shopLogo.png"
            height={32}
          />
        </div>

        <ToggleButtonGroup
          style={{ flex: 1, display: "flex", justifyContent: "center" }}
          value={category}
          exclusive
          onChange={(e, value) => setCategory(value)}
          aria-label="text alignment">
          <ToggleButton
            value="shirt"
            aria-label="centered">
            Top garments
          </ToggleButton>
          <ToggleButton
            value="pants"
            aria-label="right aligned">
            Bottom garments
          </ToggleButton>
        </ToggleButtonGroup>
        <div
          style={{
            minWidth: "10vw",
            display: "flex",
            alignItems: "center",
            justifyContent: "flex-end",
            paddingRight: 24,
          }}>
          {userSizes && (
            <Button
              variant={siz3rFilter ? "contained" : "outlined"}
              color="primary"
              style={{
                color: siz3rFilter ? "#00D278" : "white",
                backgroundColor: siz3rFilter && "#3C1992",
                borderColor: !siz3rFilter && "#00D278",
                borderWidth: 2,
                gap: 8,
              }}
              onClick={() => setSiz3rFilter(!siz3rFilter)}>
              {siz3rFilter ? <b>filtering with </b> : "filter with"}
              <img
                width={64}
                src="/logoBig.png"
                style={{ marginBottom: 3 }}
              />
            </Button>
          )}
        </div>
      </div>
      <main>
        {console.debug(finalList)}
        <GridList
          list={finalList}
          userSizes={siz3rFilter && userSizes}
        />
      </main>
    </Layout>
  );
}
